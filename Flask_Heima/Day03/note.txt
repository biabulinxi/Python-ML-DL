

# 基本查询
In [3]: Role.query.all()
Out[3]: [<Role 1>, <Role 2>]

In [4]: li = Role.query.all()

In [5]: li
Out[5]: [<Role 1>, <Role 2>]

In [6]: r = li[0]

In [7]: r.name
Out[7]: 'admain'

In [8]: Role.query.first()
Out[8]: <Role 1>

In [9]: r = Role.query.first()

In [10]: r.name
Out[10]: 'admain'

In [11]: r = Role.query.get(2)

In [12]: r.name
Out[12]: 'stuff'


##################################################################
# 其他查询方式

In [13]: Role.query.all()
Out[13]: [<Role 1>, <Role 2>]

In [15]: db.session.query(Role).all()
Out[15]: [<Role 1>, <Role 2>]


In [17]: db.session.query(Role).get(2)
Out[17]: <Role 2>


In [19]: db.session.query(Role).first()
Out[19]: <Role 1>


##################################################################
# filter_by 严格过滤

In [20]: User.query.filter_by(name="wang")
Out[20]: <flask_sqlalchemy.BaseQuery at 0x63d5e10>

In [21]: User.query.filter_by(name="wang").all()
Out[21]: [<User 1>]

In [22]: User.query.filter_by(name="wang").first()
Out[22]: <User 1>

In [23]: user = User.query.filter_by(name="wang").first()

In [24]: user.name
Out[24]: 'wang'

In [25]: user = User.query.filter_by(name="wang", role_id=1).first()

In [26]: user = User.query.filter_by(name="wang", role_id=2).first()

In [27]: user = User.query.filter_by(name="wang", role_id=1).first()

In [28]: user = User.query.filter(User.name=="wang", User.role_id==1).first()

In [29]: user
Out[29]: <User 1>

In [31]: user = User.query.filter_by(name="wang",role_id=1).first()

In [32]: user
Out[32]: <User 1>

In [33]: from sqlalchemy import or_

In [35]: User.query.filter(or_(User.name=="wang", User.email.endswith("163.com")))
    ...:
Out[35]: <flask_sqlalchemy.BaseQuery at 0x637e9b0>

In [36]: User.query.filter(or_(User.name=="wang", User.email.endswith("163.com")))
    ...: .all()
Out[36]: [<User 1>, <User 2>, <User 3>, <User 4>]


##################################################################
# offset 偏移   跳过几条

In [37]: User.query.offset(2).all()
Out[37]: [<User 3>, <User 4>]

In [38]: li[0].name
Out[38]: 'admain'

In [39]: li = User.query.offset(2).all()

In [40]: li[0].name
Out[40]: 'song'

In [41]: li[1].name
Out[41]: 'zhou'

In [46]: li = User.query.offset(1).limit(2).all()

##################################################################
# limit 限制数据数量
In [47]: li
Out[47]: [<User 2>, <User 3>]

##################################################################
# order_by 排序
In [56]: User.query.order_by(User.id.desc()).all()
Out[56]: [<User 4>, <User 3>, <User 2>, <User 1>]

In [57]: User.query.order_by(User.id.asc()).all()
Out[57]: [<User 1>, <User 2>, <User 3>, <User 4>]

In [58]: User.query.order_by(User.id).all()
Out[58]: [<User 1>, <User 2>, <User 3>, <User 4>]


##################################################################
# group_by 分组后再聚合
In [61]: db.session.query(User.role_id, func.count(User.role_id)).group_by(User.ro
    ...: le_id)
Out[61]: <flask_sqlalchemy.BaseQuery at 0x66d0198>

In [62]: db.session.query(User.role_id, func.count(User.role_id)).group_by(User.ro
    ...: le_id).all()
Out[62]: [(1, 2), (2, 2)]


##################################################################
# 关联查询
In [63]: role = Role.query.get(1)

In [64]: type(role)
Out[64]: db_demo.Role

In [65]: role.users
Out[65]: [<User 1>, <User 4>]

In [66]: role.users[0].name
Out[66]: 'wang'

In [67]: role.users[1].name
Out[67]: 'zhou'


##################################################################
# backref = "role"
In [68]: user = User.query.get(1)

In [69]: user
Out[69]: <User 1>

In [70]: user.role_id
Out[70]: 1

In [71]: Role.query.get(user.role_id)        # 被 backref 代替
Out[71]: <Role 1>

In [72]: user.role
Out[72]: <Role 1>

In [73]: user.role.name
Out[73]: 'admain'


##################################################################
#  修改
In [5]: user.name
Out[5]: 'wang'

In [6]: user.name = "python"

In [7]: db.session.add(user)

In [9]: db.session.commit()

In [10]: user.name
Out[10]: 'python'

# 更新
In [13]: User.query.filter_by(name="zhou").update({"name":"itcast","email":"itcast
    ...: @163.com"})
Out[13]: 1

In [14]: db.session.commit()

#################################################################
# 删除
In [15]: user = User.query.get(3)

In [16]: db.session.delete(user)

In [17]: db.session.commit()

